{"version":3,"sources":["Components/LineGraph.js","Components/Card.js","Components/CovidReport.js","Components/axios.js","Hourglass.gif","App.js","reportWebVitals.js","index.js"],"names":["LineGraph","props","style","width","height","margin","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashoffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","Card","className","children","CovidReport","totalConfirmed","totalRecovered","totalDeaths","country","textTransform","display","justifyContent","value","displayType","thousandSeparator","axiosInstance","axios","create","baseURL","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","loading","setLoading","covidReport","setCovidReport","days","setDays","setCountry","coronaCountAr","setCronaCountAr","setLabel","useEffect","get","then","res","status","Global","TotalConfirmed","NewRecovered","TotalDeaths","console","log","catch","error","formatDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getCoronaReportByDateRange","countrySlug","from","to","yAxisCoronaCount","Cases","xAxisLabel","covidDetails","Countries","find","Slug","TotalRecovered","src","Hourglass","alt","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.392eff19.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineGraph = (props) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: '600px',\r\n                height: '600px',\r\n                margin: '50px auto'\r\n            }}\r\n        \r\n        >\r\n            <Line data={{\r\n                labels: props.label.map(l => l.substr(0, 10)),\r\n                datasets: [\r\n                    {\r\n                        label: 'Covid-19 Report',\r\n                        fill: true,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(75,192,192,0.4)',\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashoffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: ' rgba(75,192,192,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: 'rgba(220,220, 220,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: props.yAxis\r\n                    }\r\n                ]\r\n\r\n            }} />\r\n        </div>\r\n    )\r\n}\r\nexport default LineGraph","import React from 'react';\r\n\r\nconst Card =(props) => {\r\n    return (\r\n        <div className=\"card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nconst CovidReport = (props) => {\r\n\r\n  const{\r\n    totalConfirmed,\r\n    totalRecovered,\r\n    totalDeaths,\r\n    country\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h1 style={{textTransform: 'capitalize'}}>{country === '' ? 'world wide  Corona Report': country}</h1>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Card>\r\n              <span>Total confirmed</span><br/>\r\n              <span>{<NumberFormat \r\n              value={totalConfirmed}\r\n              displayType={'text'}\r\n              thousandSeparator={true}\r\n              />\r\n              }</span>\r\n              <br />\r\n            </Card>\r\n\r\n            <Card>\r\n              <span>Total Recovered</span>\r\n              <br />\r\n              <span>{<NumberFormat\r\n              value = {totalRecovered}\r\n              displayType={'text'}\r\n              thousandSeparator={true}\r\n              />\r\n              }</span>\r\n            </Card>\r\n\r\n            <Card>\r\n              <span>Total Deaths</span>\r\n              <br />\r\n              <span>{<NumberFormat\r\n              value = {totalDeaths}\r\n              displayType={'text'}\r\n              thousandSeparator={true}\r\n              />}</span>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CovidReport;\r\n","import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://api.covid19api.com`\r\n\r\n});\r\n\r\nexport default axiosInstance;","export default __webpack_public_path__ + \"static/media/Hourglass.55d157a0.gif\";","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport LineGraph from \"./Components/LineGraph\";\nimport CovidReport from \"./Components/CovidReport\";\nimport axios from \"./Components/axios\";\nimport Hourglass from \"./Hourglass.gif\";\n\nfunction App() {\n  const [totalConfirmed, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDeaths, setTotalDeaths] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [covidReport, setCovidReport] = useState({});\n  const [days, setDays] = useState(7);\n  const [country,setCountry] = useState('');\n  const [coronaCountAr, setCronaCountAr] = useState([]);\n  const [label,setLabel] = useState([]);\n\n  //componentsDidMount\n  useEffect(() => {\n    setLoading(true);\n    axios.get(`/summary`)\n      .then(res => {\n        setLoading(false);\n\n        if (res.status === 200) {\n          setTotalConfirmed(res.data.Global.TotalConfirmed);\n          setTotalRecovered(res.data.Global.NewRecovered);\n          setTotalDeaths(res.data.Global.TotalDeaths);\n          setCovidReport(res.data);\n        }\n        console.log(res);\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }, []);\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n\n    const year = d.getFullYear();\n    const month = `0${d.getMonth()+1}`.slice(-2);\n    const _date = d.getDate();\n    return `${year}-${month}-${_date}`;\n  }\n\n  const countryHandler = (e) => {\n    setCountry(e.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - days));\n\n    //console.log(from, to);\n\n    getCoronaReportByDateRange(e.target.value, from,to )\n  }\n\n  const daysHandler = (e) => {\n    setDays(e.target.value);\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - e.target.value));\n    getCoronaReportByDateRange(country, from, to);\n  }\n\n  const getCoronaReportByDateRange = (countrySlug, from, to) => {\n\n    axios.get(`/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`)\n    .then(res=> {\n      console.log(res);\n\n      const yAxisCoronaCount = res.data.map(d => d.Cases);\n      const xAxisLabel = res.data.map(d => d.Date);\n      const covidDetails = covidReport.Countries.find(country => country.Slug === countrySlug);\n      setCronaCountAr(yAxisCoronaCount);\n      setTotalConfirmed(covidDetails.TotalConfirmed);\n      setTotalRecovered(covidDetails.TotalRecovered);\n      setTotalDeaths(covidDetails.TotalDeaths);\n      setLabel(xAxisLabel);\n\n    })\n    .catch(error =>{\n      console.log(error);\n    })\n  }\n  if (loading) {\n    return <div className=\"fatch\"><p>Fetching data from api....!</p>\n            <img src={Hourglass} alt=\"Check Internet connect or wait data is fatching\" />\n            </div>\n  }\n\n  return (\n    <div className=\"App\">\n      <CovidReport\n        totalConfirmed={totalConfirmed}\n        totalRecovered={totalRecovered}\n        totalDeaths={totalDeaths}\n        country={country}\n      />\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value = \"\">Select Country</option>\n          {\n            covidReport.Countries && covidReport.Countries.map(country => \n              <option key= {country.Slug} value={country.Slug}>{country.Country}</option>\n            )\n          }\n        </select>\n        <select value={days} onChange={daysHandler}>\n          <option value=\"7\">Last 7 days</option>\n          <option value=\"30\">Last 30 days</option>\n          <option value=\"90\">Last 90 days</option>\n        </select>\n      </div>\n      <LineGraph \n      yAxis={coronaCountAr}\n      label ={label}\n      />\n      <h1><span>MADE BY ASHISH 🧡</span></h1>\n      <h5>Stay Home || Stay Safe</h5>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}